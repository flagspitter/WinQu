// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.3
// DateTime: 2025/02/05 16:03:49
// Input file <Parser\Parser.Language.grammar.y - 2025/02/05 16:03:44>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace QuickCalc.Parser.Parser
{
internal enum Token {error=2,EOF=3,NUMBER=4,VARIABLE=5,CONST=6,
    IMAGENARY=7,OP_LSHIFT=8,OP_RSHIFT=9,OP_XOR=10,OP_OR=11,OP_AND=12,
    OP_NOT=13,OP_PLUS=14,OP_MINUS=15,OP_MULT=16,OP_DIV_INT=17,OP_DIV=18,
    OP_MOD=19,OP_POW=20,OP_FACTORIAL=21,OP_PERMUTATION=22,OP_COMBINATION=23,P_OPEN=24,
    P_CLOSE=25,OP_MATH_FUNC=26,OP_MATH_FUNC2=27,OP_SEPARATOR=28,OP_LET=29,ERROR=30};

internal partial struct ValueType
{
	// public System.Numerics.Complex n; 
	public double n;
	public string  s;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
internal partial class ParserParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[60];
  private static State[] states = new State[81];
  private static string[] nonTerms = new string[] {
      "line", "$accept", "func3", "exp", "exp2", "exp3", "exp4", "exp5", "exp6", 
      "exp7", "func", "func2", "exp8", "exp9", "factor", "number", };

  static ParserParser() {
    states[0] = new State(new int[]{4,28,5,78,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39},new int[]{-1,1,-3,3,-4,6,-5,51,-6,52,-7,53,-8,77,-9,76,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{28,4,3,-2});
    states[4] = new State(new int[]{26,5});
    states[5] = new State(-5);
    states[6] = new State(new int[]{11,7,28,-4,3,-4});
    states[7] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-5,8,-6,52,-7,53,-8,77,-9,76,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[8] = new State(new int[]{10,9,11,-7,28,-7,3,-7,25,-7});
    states[9] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-6,10,-7,53,-8,77,-9,76,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[10] = new State(new int[]{12,11,10,-9,11,-9,28,-9,3,-9,25,-9});
    states[11] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-7,12,-8,77,-9,76,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[12] = new State(new int[]{8,13,9,54,12,-11,10,-11,11,-11,28,-11,3,-11,25,-11});
    states[13] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-8,14,-9,76,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[14] = new State(new int[]{14,15,15,56,8,-13,9,-13,12,-13,10,-13,11,-13,28,-13,3,-13,25,-13});
    states[15] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-9,16,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[16] = new State(new int[]{16,17,17,58,18,71,19,73,14,-16,15,-16,8,-16,9,-16,12,-16,10,-16,11,-16,28,-16,3,-16,25,-16});
    states[17] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-10,18,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[18] = new State(new int[]{20,19,21,60,16,-19,17,-19,18,-19,19,-19,14,-19,15,-19,8,-19,9,-19,12,-19,10,-19,11,-19,28,-19,3,-19,25,-19});
    states[19] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-11,20,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[20] = new State(-24);
    states[21] = new State(new int[]{27,22,20,-26,21,-26,16,-26,17,-26,18,-26,19,-26,14,-26,15,-26,8,-26,9,-26,12,-26,10,-26,11,-26,28,-26,3,-26,25,-26});
    states[22] = new State(-30);
    states[23] = new State(-29);
    states[24] = new State(new int[]{22,25,23,65,27,-31,20,-31,21,-31,16,-31,17,-31,18,-31,19,-31,14,-31,15,-31,8,-31,9,-31,12,-31,10,-31,11,-31,28,-31,3,-31,25,-31});
    states[25] = new State(new int[]{4,28,5,29,6,30,14,31,15,32,16,33,18,34,20,35,26,36,29,37,8,38,9,39,10,40,11,41,12,42,13,43,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-15,26,-16,27});
    states[26] = new State(-35);
    states[27] = new State(-37);
    states[28] = new State(-40);
    states[29] = new State(-41);
    states[30] = new State(-42);
    states[31] = new State(-43);
    states[32] = new State(-44);
    states[33] = new State(-45);
    states[34] = new State(-46);
    states[35] = new State(-47);
    states[36] = new State(-48);
    states[37] = new State(-49);
    states[38] = new State(-50);
    states[39] = new State(-51);
    states[40] = new State(-52);
    states[41] = new State(-53);
    states[42] = new State(-54);
    states[43] = new State(-55);
    states[44] = new State(-56);
    states[45] = new State(-57);
    states[46] = new State(-58);
    states[47] = new State(-59);
    states[48] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,25,-39},new int[]{-4,49,-5,51,-6,52,-7,53,-8,77,-9,76,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[49] = new State(new int[]{25,50,11,7});
    states[50] = new State(-38);
    states[51] = new State(new int[]{10,9,11,-6,28,-6,3,-6,25,-6});
    states[52] = new State(new int[]{12,11,10,-8,11,-8,28,-8,3,-8,25,-8});
    states[53] = new State(new int[]{8,13,9,54,12,-10,10,-10,11,-10,28,-10,3,-10,25,-10});
    states[54] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-8,55,-9,76,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[55] = new State(new int[]{14,15,15,56,8,-14,9,-14,12,-14,10,-14,11,-14,28,-14,3,-14,25,-14});
    states[56] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-9,57,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[57] = new State(new int[]{16,17,17,58,18,71,19,73,14,-17,15,-17,8,-17,9,-17,12,-17,10,-17,11,-17,28,-17,3,-17,25,-17});
    states[58] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-10,59,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[59] = new State(new int[]{20,19,21,60,16,-20,17,-20,18,-20,19,-20,14,-20,15,-20,8,-20,9,-20,12,-20,10,-20,11,-20,28,-20,3,-20,25,-20});
    states[60] = new State(-25);
    states[61] = new State(-23);
    states[62] = new State(-34);
    states[63] = new State(new int[]{4,28,5,29,6,30,14,31,15,32,16,33,18,34,20,35,26,36,29,37,8,38,9,39,10,40,11,41,12,42,13,43,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-14,64,-15,62,-16,27});
    states[64] = new State(new int[]{22,25,23,65,27,-33,20,-33,21,-33,16,-33,17,-33,18,-33,19,-33,14,-33,15,-33,8,-33,9,-33,12,-33,10,-33,11,-33,28,-33,3,-33,25,-33});
    states[65] = new State(new int[]{4,28,5,29,6,30,14,31,15,32,16,33,18,34,20,35,26,36,29,37,8,38,9,39,10,40,11,41,12,42,13,43,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-15,66,-16,27});
    states[66] = new State(-36);
    states[67] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,36,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-28,19,-28,28,-28,3,-28,25,-28},new int[]{-12,68,-13,23,-14,24,-15,62,-16,27});
    states[68] = new State(new int[]{27,22,20,-27,21,-27,16,-27,17,-27,18,-27,19,-27,14,-27,15,-27,8,-27,9,-27,12,-27,10,-27,11,-27,28,-27,3,-27,25,-27});
    states[69] = new State(new int[]{4,28,5,29,6,30,14,31,15,32,16,33,18,34,20,35,26,36,29,37,8,38,9,39,10,40,11,41,12,42,13,43,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-14,70,-15,62,-16,27});
    states[70] = new State(new int[]{22,25,23,65,27,-32,20,-32,21,-32,16,-32,17,-32,18,-32,19,-32,14,-32,15,-32,8,-32,9,-32,12,-32,10,-32,11,-32,28,-32,3,-32,25,-32});
    states[71] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-10,72,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[72] = new State(new int[]{20,19,21,60,16,-21,17,-21,18,-21,19,-21,14,-21,15,-21,8,-21,9,-21,12,-21,10,-21,11,-21,28,-21,3,-21,25,-21});
    states[73] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39,25,-39},new int[]{-10,74,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[74] = new State(new int[]{20,19,21,60,16,-22,17,-22,18,-22,19,-22,14,-22,15,-22,8,-22,9,-22,12,-22,10,-22,11,-22,28,-22,3,-22,25,-22});
    states[75] = new State(new int[]{20,19,21,60,16,-18,17,-18,18,-18,19,-18,14,-18,15,-18,8,-18,9,-18,12,-18,10,-18,11,-18,28,-18,3,-18,25,-18});
    states[76] = new State(new int[]{16,17,17,58,18,71,19,73,14,-15,15,-15,8,-15,9,-15,12,-15,10,-15,11,-15,28,-15,3,-15,25,-15});
    states[77] = new State(new int[]{14,15,15,56,8,-12,9,-12,12,-12,10,-12,11,-12,28,-12,3,-12,25,-12});
    states[78] = new State(new int[]{29,79,22,-41,23,-41,27,-41,20,-41,21,-41,16,-41,17,-41,18,-41,19,-41,14,-41,15,-41,8,-41,9,-41,12,-41,10,-41,11,-41,28,-41,3,-41});
    states[79] = new State(new int[]{4,28,5,29,6,30,14,31,15,63,16,33,18,34,20,35,26,67,29,37,8,38,9,39,10,40,11,41,12,42,13,69,21,44,22,45,23,46,7,47,24,48,27,-39,17,-39,19,-39,28,-39,3,-39},new int[]{-3,80,-4,6,-5,51,-6,52,-7,53,-8,77,-9,76,-10,75,-11,61,-12,21,-13,23,-14,24,-15,62,-16,27});
    states[80] = new State(new int[]{28,4,3,-3});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{5,29,-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,28,26});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-4,11,-5});
    rules[8] = new Rule(-5, new int[]{-6});
    rules[9] = new Rule(-5, new int[]{-5,10,-6});
    rules[10] = new Rule(-6, new int[]{-7});
    rules[11] = new Rule(-6, new int[]{-6,12,-7});
    rules[12] = new Rule(-7, new int[]{-8});
    rules[13] = new Rule(-7, new int[]{-7,8,-8});
    rules[14] = new Rule(-7, new int[]{-7,9,-8});
    rules[15] = new Rule(-8, new int[]{-9});
    rules[16] = new Rule(-8, new int[]{-8,14,-9});
    rules[17] = new Rule(-8, new int[]{-8,15,-9});
    rules[18] = new Rule(-9, new int[]{-10});
    rules[19] = new Rule(-9, new int[]{-9,16,-10});
    rules[20] = new Rule(-9, new int[]{-9,17,-10});
    rules[21] = new Rule(-9, new int[]{-9,18,-10});
    rules[22] = new Rule(-9, new int[]{-9,19,-10});
    rules[23] = new Rule(-10, new int[]{-11});
    rules[24] = new Rule(-10, new int[]{-10,20,-11});
    rules[25] = new Rule(-10, new int[]{-10,21});
    rules[26] = new Rule(-11, new int[]{-12});
    rules[27] = new Rule(-11, new int[]{26,-12});
    rules[28] = new Rule(-11, new int[]{26});
    rules[29] = new Rule(-12, new int[]{-13});
    rules[30] = new Rule(-12, new int[]{-12,27});
    rules[31] = new Rule(-13, new int[]{-14});
    rules[32] = new Rule(-13, new int[]{13,-14});
    rules[33] = new Rule(-13, new int[]{15,-14});
    rules[34] = new Rule(-14, new int[]{-15});
    rules[35] = new Rule(-14, new int[]{-14,22,-15});
    rules[36] = new Rule(-14, new int[]{-14,23,-15});
    rules[37] = new Rule(-15, new int[]{-16});
    rules[38] = new Rule(-15, new int[]{24,-4,25});
    rules[39] = new Rule(-16, new int[]{});
    rules[40] = new Rule(-16, new int[]{4});
    rules[41] = new Rule(-16, new int[]{5});
    rules[42] = new Rule(-16, new int[]{6});
    rules[43] = new Rule(-16, new int[]{14});
    rules[44] = new Rule(-16, new int[]{15});
    rules[45] = new Rule(-16, new int[]{16});
    rules[46] = new Rule(-16, new int[]{18});
    rules[47] = new Rule(-16, new int[]{20});
    rules[48] = new Rule(-16, new int[]{26});
    rules[49] = new Rule(-16, new int[]{29});
    rules[50] = new Rule(-16, new int[]{8});
    rules[51] = new Rule(-16, new int[]{9});
    rules[52] = new Rule(-16, new int[]{10});
    rules[53] = new Rule(-16, new int[]{11});
    rules[54] = new Rule(-16, new int[]{12});
    rules[55] = new Rule(-16, new int[]{13});
    rules[56] = new Rule(-16, new int[]{21});
    rules[57] = new Rule(-16, new int[]{22});
    rules[58] = new Rule(-16, new int[]{23});
    rules[59] = new Rule(-16, new int[]{7});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // line -> func3
{ Answer=ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [line] result : {0}\n", $1.n);     */ }
        break;
      case 3: // line -> VARIABLE, OP_LET, func3
{ Answer=ValueStack[ValueStack.Depth-1].n; SetVariable(ValueStack[ValueStack.Depth-3].s,ValueStack[ValueStack.Depth-1].n);                  /* Console.WriteLine("yacc [line] let : {0}\n", $3.n);        */ }
        break;
      case 4: // func3 -> exp
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [func3] func3 : {0}", $$.n);          */ }
        break;
      case 5: // func3 -> func3, OP_SEPARATOR, OP_MATH_FUNC
{ CurrentSemanticValue.n = CalcMathFunction(ValueStack[ValueStack.Depth-1].s,(double)ValueStack[ValueStack.Depth-3].n); /* Console.WriteLine("yacc [func3] func factor : {0}", $$.n); */ }
        break;
      case 6: // exp -> exp2
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [exp] exp2 : {0}", $$.n);          */ }
        break;
      case 7: // exp -> exp, OP_OR, exp2
{ CurrentSemanticValue.n = (int)ValueStack[ValueStack.Depth-3].n | (int)ValueStack[ValueStack.Depth-1].n;                         /* Console.WriteLine("yacc [exp] exp << term : {0}", $$.n);   */ }
        break;
      case 8: // exp2 -> exp3
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [exp2] exp3 : {0}", $$.n);         */ }
        break;
      case 9: // exp2 -> exp2, OP_XOR, exp3
{ CurrentSemanticValue.n = (int)ValueStack[ValueStack.Depth-3].n ^ (int)ValueStack[ValueStack.Depth-1].n;                         /* Console.WriteLine("yacc [exp2] exp2 << term : {0}", $$.n); */ }
        break;
      case 10: // exp3 -> exp4
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [exp3] exp4 : {0}", $$.n);         */ }
        break;
      case 11: // exp3 -> exp3, OP_AND, exp4
{ CurrentSemanticValue.n = (int)ValueStack[ValueStack.Depth-3].n & (int)ValueStack[ValueStack.Depth-1].n;                         /* Console.WriteLine("yacc [exp3] exp3 << term : {0}", $$.n); */ }
        break;
      case 12: // exp4 -> exp5
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [exp4] exp5 : {0}", $$.n);         */ }
        break;
      case 13: // exp4 -> exp4, OP_LSHIFT, exp5
{ CurrentSemanticValue.n = (int)ValueStack[ValueStack.Depth-3].n << (int)ValueStack[ValueStack.Depth-1].n;                        /* Console.WriteLine("yacc [exp4] exp4 << exp5 : {0}", $$.n); */ }
        break;
      case 14: // exp4 -> exp4, OP_RSHIFT, exp5
{ CurrentSemanticValue.n = (int)ValueStack[ValueStack.Depth-3].n >> (int)ValueStack[ValueStack.Depth-1].n;                        /* Console.WriteLine("yacc [exp4] exp4 >> exp5 : {0}", $$.n); */ }
        break;
      case 15: // exp5 -> exp6
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [exp5] exp6 : {0}", $$.n);        */  }
        break;
      case 16: // exp5 -> exp5, OP_PLUS, exp6
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n + ValueStack[ValueStack.Depth-1].n;                                   /* Console.WriteLine("yacc [exp5] exp5 + exp6 : {0}", $$.n); */  }
        break;
      case 17: // exp5 -> exp5, OP_MINUS, exp6
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n - ValueStack[ValueStack.Depth-1].n;                                   /* Console.WriteLine("yacc [exp5] exp5 - exp6 : {0}", $$.n); */  }
        break;
      case 18: // exp6 -> exp7
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [exp6] exp7 : {0}", $$.n);         */ }
        break;
      case 19: // exp6 -> exp6, OP_MULT, exp7
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n * ValueStack[ValueStack.Depth-1].n;                                   /* Console.WriteLine("yacc [exp6] exp6 * exp7 : {0}", $$.n);  */ }
        break;
      case 20: // exp6 -> exp6, OP_DIV_INT, exp7
{ CurrentSemanticValue.n = (int)(ValueStack[ValueStack.Depth-3].n / ValueStack[ValueStack.Depth-1].n);                            /* Console.WriteLine("yacc [exp6] exp6 // exp7 : {0}", $$.n); */ }
        break;
      case 21: // exp6 -> exp6, OP_DIV, exp7
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n / ValueStack[ValueStack.Depth-1].n;                                   /* Console.WriteLine("yacc [exp6] exp6 / exp7 : {0}", $$.n);  */ }
        break;
      case 22: // exp6 -> exp6, OP_MOD, exp7
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n % ValueStack[ValueStack.Depth-1].n;                                   /* Console.WriteLine("yacc [exp6] exp6 % exp7 : {0}", $$.n);  */ }
        break;
      case 23: // exp7 -> func
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [exp7] func : {0}", $$.n);         */ }
        break;
      case 24: // exp7 -> exp7, OP_POW, func
{ CurrentSemanticValue.n = Math.Pow((double)ValueStack[ValueStack.Depth-3].n,(double)ValueStack[ValueStack.Depth-1].n);  /* Console.WriteLine("yacc [exp7] exp7 ^ func : {0}", $$.n);  */ }
        break;
      case 25: // exp7 -> exp7, OP_FACTORIAL
{ CurrentSemanticValue.n = Factorial((double)ValueStack[ValueStack.Depth-2].n);              /* Console.WriteLine("yacc [exp7] exp7 ! : {0}", $$.n);  */ }
        break;
      case 26: // func -> func2
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [func] factor : {0}", $$.n);       */ }
        break;
      case 27: // func -> OP_MATH_FUNC, func2
{ CurrentSemanticValue.n = CalcMathFunction(ValueStack[ValueStack.Depth-2].s,(double)ValueStack[ValueStack.Depth-1].n);  /* Console.WriteLine("yacc [func] func factor : {0}", $$.n);  */ }
        break;
      case 28: // func -> OP_MATH_FUNC
{ CurrentSemanticValue.n = CalcMathFunction(ValueStack[ValueStack.Depth-1].s);               /* Console.WriteLine("yacc [func] func : {0}", $$.n);  */ }
        break;
      case 29: // func2 -> exp8
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [func2] factor : {0}", $$.n);      */ }
        break;
      case 30: // func2 -> func2, OP_MATH_FUNC2
{ CurrentSemanticValue.n = CalcMathFunction2(ValueStack[ValueStack.Depth-1].s,(double)ValueStack[ValueStack.Depth-2].n); /* Console.WriteLine("yacc [func2] func factor : {0}", $$.n); */ }
        break;
      case 31: // exp8 -> exp9
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [exp8] func : {0}", $$.n);         */ }
        break;
      case 32: // exp8 -> OP_NOT, exp9
{ CurrentSemanticValue.n = ~(int)ValueStack[ValueStack.Depth-1].n;                                    /* Console.WriteLine("yacc [exp8] ~func : {0}", $$.n);       */ }
        break;
      case 33: // exp8 -> OP_MINUS, exp9
{ CurrentSemanticValue.n = -ValueStack[ValueStack.Depth-1].n;                                         /* Console.WriteLine("yacc [exp8] - func : {0}", $$.n);       */ }
        break;
      case 34: // exp9 -> factor
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [exp9] func : {0}", $$.n);         */ }
        break;
      case 35: // exp9 -> exp9, OP_PERMUTATION, factor
{ CurrentSemanticValue.n = Permutation( (double)ValueStack[ValueStack.Depth-3].n, (double)ValueStack[ValueStack.Depth-1].n ); /* Console.WriteLine("yacc [exp9] nPr : {0}", $$.n);       */ }
        break;
      case 36: // exp9 -> exp9, OP_COMBINATION, factor
{ CurrentSemanticValue.n = Combination( (double)ValueStack[ValueStack.Depth-3].n, (double)ValueStack[ValueStack.Depth-1].n ); /* Console.WriteLine("yacc [exp9] nCr : {0}", $$.n);       */ }
        break;
      case 37: // factor -> number
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [factor] number : {0}", $$.n);     */ }
        break;
      case 38: // factor -> P_OPEN, exp, P_CLOSE
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;                                          /* Console.WriteLine("yacc [factor] ( exp ) : {0}", $$.n);    */ }
        break;
      case 40: // number -> NUMBER
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;                                          /* Console.WriteLine("yacc [number] number : {0}", $$.n);     */ }
        break;
      case 41: // number -> VARIABLE
{ CurrentSemanticValue.n = GetVariable(ValueStack[ValueStack.Depth-1].s);                             /* Console.WriteLine("yacc [number] Variable : {0}", $$.n);   */ }
        break;
      case 42: // number -> CONST
{ CurrentSemanticValue.n = GetConst(ValueStack[ValueStack.Depth-1].s);                       /* Console.WriteLine("yacc [number] Const : {0}", $$.n);      */ }
        break;
      case 43: // number -> OP_PLUS
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 44: // number -> OP_MINUS
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 45: // number -> OP_MULT
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 46: // number -> OP_DIV
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 47: // number -> OP_POW
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 48: // number -> OP_MATH_FUNC
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 49: // number -> OP_LET
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 50: // number -> OP_LSHIFT
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 51: // number -> OP_RSHIFT
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 52: // number -> OP_XOR
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 53: // number -> OP_OR
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 54: // number -> OP_AND
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 55: // number -> OP_NOT
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 56: // number -> OP_FACTORIAL
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 57: // number -> OP_PERMUTATION
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 58: // number -> OP_COMBINATION
{ throw new ExpressionException("Unexpected operator"); }
        break;
      case 59: // number -> IMAGENARY
{ throw new ExpressionException("Not supported"); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
